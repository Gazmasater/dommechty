package main

import (
	"log"
	"os"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

func main() {
	_ = godotenv.Load()

	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
	}

	botAPI, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := botAPI.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil && update.Message.Text == "/start" {
			// –®–∞–ø–∫–∞
			headerPhoto := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileURL("https://gazmasater.github.io/dommechty/header.jpg"))
			headerPhoto.Caption = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –¥–æ–º–æ–≤"
			if _, err := botAPI.Send(headerPhoto); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∞–ø–∫–∏:", err)
			}

			// –ü—Ä–æ—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –≤–º–µ—Å—Ç–æ WebApp-–∫–Ω–æ–ø–∫–∏
			webAppLink := tgbotapi.NewMessage(update.Message.Chat.ID, "üåê –í–∏—Ç—Ä–∏–Ω–∞ –¥–æ–º–æ–≤: https://gazmasater.github.io/dommechty/")
			if _, err := botAPI.Send(webAppLink); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏:", err)
			}

			// –°–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤
			houses := []struct {
				Name, Description, PhotoURL string
			}{
				{"üè° –î–æ–º 120 –º¬≤", "2 —ç—Ç–∞–∂–∞, —É—á–∞—Å—Ç–æ–∫ 6 —Å–æ—Ç–æ–∫", "https://terem-dom.ru/d/cimg6172.jpg"},
				{"üè† –î–æ–º 95 –º¬≤", "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ —Ç—ë–ø–ª—ã–π", "https://terem-dom.ru/d/cimg6177.jpg"},
				{"üèò –î–æ–º —Å —Ç–µ—Ä—Ä–∞—Å–æ–π", "–° –≤–∏–¥–æ–º –Ω–∞ —Ä–µ–∫—É", "https://terem-dom.ru/d/cimg6169.jpg"},
				{"üèï –ö–æ—Ç—Ç–µ–¥–∂", "–î–ª—è —Å–µ–º—å–∏ –∏ –æ—Ç–¥—ã—Ö–∞", "https://terem-dom.ru/d/cimg6170.jpg"},
			}

			for _, h := range houses {
				msg := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileURL(h.PhotoURL))
				msg.Caption = h.Name + "\n" + h.Description
				if _, err := botAPI.Send(msg); err != nil {
					log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞:", err)
				}
			}
		}
	}
}
